@model AskGenerator.Mvc.ViewModels.TeamResultsViewModel
@using AskGenerator.ViewModels
@using AskGenerator.Business.Entities

@{
    ViewBag.Title = "Кафедри";
}
<div class="detailsPage">
    <header class="col-xs-12">
        <div id="teams" class="col-xs-12 col-md-4">
            @*@SelectOption("all", Resources.Resource.AllTeachers)*@
            <table>
                <thead>
                    <tr>
                        <th>Кафедра</th>
                        <th>Складність</th>
                        <th>Сердедня оцінка</th>
                        <th>Загальне враження</th>
                        <th>Кількість голосів</th>
                        <th>Рейтинг</th>
                    </tr>
                    @SelectOption(Model.Teams.First(t => t.Id == Team.AllTeachersTeamId))
                </thead>
                <tbody>
                    @foreach (var t in Model.Teams.Where(t => t.Id != Team.AllTeachersTeamId).OrderBy(t => t.Rate.Answer))
                    {
                        @SelectOption(t)
                    }
                </tbody>
            </table>
        </div>

        <div class="col-xs-12 col-md-8">
            @Totals()
        </div>
    </header>

    <section id="team-table" class="col-xs-12">
        @foreach (var pair in Model.Questions)
        {
            @QuestionDetails(pair)
        }
    </section>

    <section id="teacherBoard" class="row">
        @foreach (var t in Model.List)
        {
            @Teacher(t)
        }
    </section>
</div>

<article id="details-popover" hidden="hidden">
    <table>
        <thead>
            <tr>
                <td>@Resource.VotesCount</td>
                <td id="votesCount"></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var q in Model.Questions)
            {
                var id = q.Key + 'm';
                <tr>
                    <td>@q.Value</td>
                    <td id="@id"></td>
                </tr>
            }
        </tbody>
    </table>
</article>

@section Scripts{
    @Scripts.Render("~/bundles/jqmeter")
    <script>
        Pages.Team.init();
    </script>
}

@helper SelectOption(Team team)
{
    var id = team.Id;
    var rowClass = id == Model.Id ? "selected" : string.Empty;
    if (id == Team.AllTeachersTeamId)
    {
        id = null;
    }
    <tr class="@rowClass">
        <td>@Html.ActionLink(team.Name, "Team", new { id = id })</td>
        <td>@RoundAnswer(team.AvgDifficult)</td>
        <td>@RoundAnswer(team.ClearRate)</td>
        <td>@RoundAnswer(team.AdditionalMark != null ? team.AdditionalMark.Answer : 0)</td>
        <td>@team.Rate.Count</td>
        <td>@RoundAnswer(team.Rate.Answer, 1)</td>
    </tr>
}

@helper Totals()
{
    <table class="totals">
        <caption class="h3">Totals</caption>
        <thead>
            <tr>
                <th></th>
                <th>Vote</th>
                <th>Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pair in Model.Questions)
            {
                var avg = Model.Marks[pair.Key].Avg;
                <tr>
                    <td>@pair.Value</td>
                    <td>@RoundAnswer(avg.Answer)</td>
                    <td>@avg.Count</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th>@Resource.Rate</th>
                <th>@RoundAnswer(Model.Rate.Answer)</th>
                <th>@Model.Rate.Count</th>
            </tr>
        </tfoot>
    </table>
}

@helper QuestionDetails(KeyValuePair<string, string> pair)
{
    var qDictionary = Model.Marks[pair.Key];
    var totalCount = qDictionary.Avg.Count;
    var maxCount = qDictionary.Values.Max();

    var d = qDictionary.D();
    <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
        <div class="question-details">
            <h5>@pair.Value</h5>
            <div class="col-xs-12">
                @foreach (var mark in qDictionary.OrderBy(p => p.Key))
                {
                    var percent = Math.Round(100f * (float)mark.Value / (float)totalCount, 1);

                    <div class="col-xs-1 meterWrapper">
                        <div>
                            @mark.Value
                            <a href="#" class="meter" data-raised="@mark.Value" data-goal="@maxCount" data-toggle="tooltip" data-placement="auto top" data-content="@percent%"></a>
                        </div>
                        <span>
                            @mark.Key
                        </span>
                    </div>

                }
            </div>
            <footer class="col-xs-12">
                <div>
                    <span class="col-xs-9" style="text-align:right">@Resource.AvgMark</span>
                    <span class="col-xs-3">@RoundAnswer(qDictionary.Avg.Answer)</span>
                </div>
                <div>
                    <span class="col-xs-9" style="text-align:right">@Resource.ASD</span>
                    <span class="col-xs-3">@RoundAnswer(Math.Sqrt(d))</span>
                </div>
            </footer>
        </div>
    </div>
}


@helper Teacher(TeacherViewModel teacher)
{
    <article class="col-lg-2 col-md-3 col-sm-4 col-xs-6 teacher-tile-wrapper" id="@teacher.Id">
        <a href="#" class="teacher-tile" data-popover="@teacher.Badges.ToJson()" data-votes-count="@teacher.VotesCount">
            <div class="img-thumbnail">
                <div class="photo" style="background: url('@this.R.Image(teacher.Image, teacher.IsMale)') no-repeat center top / cover"></div>
            </div>
            <span title="@teacher.FullName()">@teacher.GetShortName()</span>
            <div class="badges">
                @if (teacher.AverageMark.Type != char.MinValue)
                {
                    var avg = Math.Round(teacher.AverageMark.Mark, 4);
                    <span class="badge avg" data-togglee="tooltip" title="@avg">@Math.Round(avg, 1)</span>
                }
                @foreach (var tbadge in teacher.Badges.Where(tb => tb.Type != char.MinValue))
                {
                    @Badge(tbadge)
                }
            </div>
        </a>
    </article>
}

@helper Badge(TeacherBadge tbadge)
{
    var badge = Model.Badges.GetOrDefault(tbadge.Id + tbadge.Type);
    if (badge != null)
    {
        var ttip = badge.ToolTip;
        if (ttip.EndsWith("?"))
        {
            ttip = ttip.TrimEnd('?') + '(' + tbadge.Mark.ToString("0.00") + ')';
        }
        if (string.IsNullOrEmpty(badge.Image))
        {
            <span class="badge" data-toggle="tooltip" title="@ttip"></span>
        }
        else
        {
            <span class="badge" data-toggle="tooltip" style="background-image: url(@badge.Image)" title="@ttip"></span>
        }
    }
}

@functions{
    string RoundAnswer(double x, int decimals = 2)
    {
        return x <= 0 ? "-" : Math.Round(x, decimals).ToString();
    }
}