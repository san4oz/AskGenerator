@model AskGenerator.Mvc.ViewModels.TeamResultsViewModel
@using AskGenerator.ViewModels
@using AskGenerator.Business.Entities

@{
    ViewBag.Title = "Кафедри";
}
<div class="detailsPage">
    <select id="team" name="team">
        @SelectOption("all", Resources.Resource.AllTeachers)
        @foreach (var t in Model.Teams)
        {
            @SelectOption(t.Id, t.Name)
        }
    </select>

    @Totals()

    <section id="team-table" class="col-xs-12">
        @foreach (var pair in Model.Questions)
        {
            @QuestionDetails(pair)
        }
    </section>

    <section id="teacherBoard" class="row">
        @foreach (var t in Model.List)
        {
            @Teacher(t)
        }
    </section>
</div>

<article id="details-popover" hidden="hidden">
    <table>
        <thead>
            <tr>
                <td>@Resource.VotesCount</td>
                <td id="votesCount"></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var q in Model.Questions)
            {
                var id = q.Key + 'm';
                <tr>
                    <td>@q.Value</td>
                    <td id="@id"></td>
                </tr>
            }
        </tbody>
    </table>
</article>

@section Scripts{
    <script>
        Pages.Team.init();
    </script>
}

@helper SelectOption(string id, string text)
{
    if (id == Model.Id)
    {
        <option value="@id" selected="selected">@text</option>
    }
    else
    {
        <option value="@id">@text</option>
    }
}

@helper Totals()
{
    <table class="totals">
        <caption class="h3">Totals</caption>
        <thead>
            <tr>
                <th></th>
                <th>Vote</th>
                <th>Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pair in Model.Questions)
            {
                var avg = Model.Marks[pair.Key].Avg;
                <tr>
                    <td>@pair.Value</td>
                    <td>@avg.Answer</td>
                    <td>@avg.Count</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th>Rate</th>
                <th>@Model.Rate.Answer</th>
                <th>@Model.Rate.Count</th>
            </tr>
        </tfoot>
    </table>
}

@helper QuestionDetails(KeyValuePair<string, string> pair)
{
    var qDictionary = Model.Marks[pair.Key];
    var totalCount = qDictionary.Values.Aggregate(0, (a, c) => a += c);
    var d = qDictionary.D();
    <table class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
        <caption class="h5">@pair.Value</caption>
        <thead>
            <tr>
                <th>    </th>
                <th>Vote</th>
                <th>Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var mark in qDictionary.OrderBy(p => p.Key))
            {
                var percent = Math.Round(100f * (float)mark.Value / (float)totalCount, 1);
                <tr>
                    <td></td>
                    <td>
                        @mark.Key
                    </td>
                    <td>
                        <div class="col-xs-10 col-md-6">
                            <a href="#" data-toggle="tooltip" data-placement="auto top" data-content="@percent%">
                                <meter max="100" min="0" value="@percent" high="100" low="0" optimum="50"></meter>
                            </a>
                        </div>
                        <span class="col-xs-1">
                            @mark.Value
                        </span>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th></th>
                <th>Avg</th>
                <th>@RoundAnswer(qDictionary.Avg.Answer)</th>
            </tr>
            <tr>
                <th></th>
                <th>СКВ</th>
                <th>@RoundAnswer(Math.Sqrt(d))</th>
            </tr>
        </tfoot>
    </table>
}


@helper Teacher(TeacherViewModel teacher)
{
    <article class="col-lg-2 col-md-3 col-sm-4 col-xs-6 teacher-tile-wrapper" id="@teacher.Id">
        <a href="#" class="teacher-tile" data-popover="@teacher.Badges.ToJson()" data-votes-count="@teacher.VotesCount">
            <div class="img-thumbnail">
                <div class="photo" style="background: url('@this.R.Image(teacher.Image, teacher.IsMale)') no-repeat center top / cover"></div>
            </div>
            <span title="@teacher.FullName()">@teacher.GetShortName()</span>
            <div class="badges">
                @if (teacher.AverageMark.Type != char.MinValue)
                {
                    var avg = Math.Round(teacher.AverageMark.Mark, 4);
                    <span class="badge avg" data-togglee="tooltip" title="@avg">@Math.Round(avg, 1)</span>
                }
                @foreach (var tbadge in teacher.Badges.Where(tb => tb.Type != char.MinValue))
                {
                    @Badge(tbadge)
                }
            </div>
        </a>
    </article>
}

@helper Badge(TeacherBadge tbadge)
{
    var badge = Model.Badges.GetOrDefault(tbadge.Id + tbadge.Type);
    if (badge != null)
    {
        var ttip = badge.ToolTip;
        if (ttip.EndsWith("?"))
        {
            ttip = ttip.TrimEnd('?') + '(' + tbadge.Mark.ToString("0.00") + ')';
        }
        if (string.IsNullOrEmpty(badge.Image))
        {
            <span class="badge" data-toggle="tooltip" title="@ttip"></span>
        }
        else
        {
            <span class="badge" data-toggle="tooltip" style="background-image: url(@badge.Image)" title="@ttip"></span>
        }
    }
}

@functions{
    double RoundAnswer(double x)
    {
        return Math.Round(x, 2);
    }
}