@model AskGenerator.Mvc.ViewModels.GroupStatisticViewModel
@using AskGenerator.ViewModels
@using AskGenerator.Business.Entities

@{
    ViewBag.Title = "Групи";
    Robots.Index = false;
}
<div class="detailsPage">
    <div class="col-xs-5 col-sm-3 col-lg-2">
        <table>
            <caption class="h4">Groups</caption>
            <thead>
                <tr>
                    <th> Назва </th>
                    <th> AVG </th>
                    <th> Max count </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in Model.Groups)
                {
                    var cl = group.Id == Model.Id ? "selected" : string.Empty;
                    <tr class="@cl">
                        <td>@Html.ActionLink(group.Name, "Group", new { id = group.Id })</td>
                        <td> @RoundAnswer(group.Avg, 1)</td>
                        <td>@group.VotesCount</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div id="groupDetails" class="col-xs-12 col-sm-8">
        @Totals()

        <section id="team-table" class="col-xs-12">
            @foreach (var pair in Model.Questions)
            {
                @QuestionDetails(pair)
            }
        </section>
    </div>
</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqmeter")
    <script>
        Pages.Team.init();
    </script>
}


@helper Totals()
{
    <table class="totals">
        <caption class="h3">Totals</caption>
        <thead>
            <tr>
                <th></th>
                <th>Vote</th>
                <th>Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pair in Model.Questions)
            {
                var avg = Model.Marks[pair.Key].Avg;
                <tr>
                    <td>@pair.Value</td>
                    <td>@RoundAnswer(avg.Answer)</td>
                    <td>@avg.Count</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th>@Resource.Rate</th>
                <th>@RoundAnswer(Model.Rate.Answer)</th>
                <th>@Model.Rate.Count</th>
            </tr>
        </tfoot>
    </table>
}

@helper QuestionDetails(KeyValuePair<string, string> pair)
{
    var qDictionary = Model.Marks[pair.Key];
    var totalCount = qDictionary.Avg.Count;
    var maxCount = qDictionary.Values.Max();

    var d = qDictionary.D();
    <div class="col-xs-12 col-md-6 col-lg-4">
        <div class="question-details">
            <h5>@pair.Value</h5>
            <div class="col-xs-12">
                @foreach (var mark in qDictionary.OrderBy(p => p.Key))
                {
                    var percent = Math.Round(100f * (float)mark.Value / (float)totalCount, 1);

                    <div class="col-xs-1 meterWrapper">
                        <div>
                            @mark.Value
                            <a href="#" class="meter" data-raised="@mark.Value" data-goal="@maxCount" data-toggle="tooltip" data-placement="auto top" data-content="@percent%"></a>
                        </div>
                        <span>
                            @mark.Key
                        </span>
                    </div>

                }
            </div>
            <footer class="col-xs-12">
                <div>
                    <span class="col-xs-10" style="text-align:right">@Resource.AvgMark</span>
                    <span class="col-xs-2">@RoundAnswer(qDictionary.Avg.Answer)</span>
                </div>
                <div>
                    <span class="col-xs-10" style="text-align:right">@Resource.ASD</span>
                    <span class="col-xs-2">@RoundAnswer(Math.Sqrt(d))</span>
                </div>
            </footer>
        </div>
    </div>
}


@functions{
    string RoundAnswer(double x, int decimals = 2)
    {
        return x <= 0 ? "-" : Math.Round(x, decimals).ToString();
    }
}